{\rtf1\ansi\ansicpg1252\cocoartf1187
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 /*\
- (void)doneAction:(id)sender\{\
    NSLog(@"Done");\
\}\
*/\cf0 \
\
\cf2 /*\
- (id)initWithNibName:(NSString *)nibName bundle:(NSBundle *)nibBundle \{\
    if ([super initWithNibName:nibName bundle:nibBundle] == nil)\
        return nil;\
    if ([[[UIDevice currentDevice] systemVersion] floatValue] >= 3.0) \{\
        self.numberPadDoneImageNormal = [UIImage imageNamed:@"NumberDone.png"];\
        self.numberPadDoneImageHighlighted = [UIImage imageNamed:@"NumberDone.png"];\
    \} else \{\
        self.numberPadDoneImageNormal = [UIImage imageNamed:@"NumberDone.png"];\
        self.numberPadDoneImageHighlighted = [UIImage imageNamed:@"NumberDone.png"];\
    \}\
    return self;\
\}\
\
- (void)viewWillAppear:(BOOL)animated \{\
    [super viewWillAppear:animated];\
    \
    // Add listener for keyboard display events\
    if ([[[UIDevice currentDevice] systemVersion] floatValue] >= 3.2) \{\
        [[NSNotificationCenter defaultCenter] addObserver:self\
                                                 selector:@selector(keyboardDidShow:)\
                                                     name:UIKeyboardDidShowNotification\
                                                   object:nil];\
    \} else \{\
        [[NSNotificationCenter defaultCenter] addObserver:self\
                                                 selector:@selector(keyboardWillShow:)\
                                                     name:UIKeyboardWillShowNotification\
                                                   object:nil];\
    \}\
    \
    // Add listener for all text fields starting to be edited\
    [[NSNotificationCenter defaultCenter] addObserver:self\
                                             selector:@selector(textFieldDidBeginEditing:)\
                                                 name:UITextFieldTextDidBeginEditingNotification\
                                               object:nil];\
\}\
\
- (void)viewWillDisappear:(BOOL)animated \{\
    if ([[[UIDevice currentDevice] systemVersion] floatValue] >= 3.2) \{\
        [[NSNotificationCenter defaultCenter] removeObserver:self\
                                                        name:UIKeyboardDidShowNotification\
                                                      object:nil];\
    \} else \{\
        [[NSNotificationCenter defaultCenter] removeObserver:self\
                                                        name:UIKeyboardWillShowNotification\
                                                      object:nil];\
    \}\
    [[NSNotificationCenter defaultCenter] removeObserver:self\
                                                    name:UITextFieldTextDidBeginEditingNotification\
                                                  object:nil];\
    [super viewWillDisappear:animated];\
\}\
\
- (UIView *)findFirstResponderUnder:(UIView *)root \{\
    if (root.isFirstResponder)\
        return root;\
    for (UIView *subView in root.subviews) \{\
        UIView *firstResponder = [self findFirstResponderUnder:subView];\
        if (firstResponder != nil)\
            return firstResponder;\
    \}\
    return nil;\
\}\
\
- (UITextField *)findFirstResponderTextField \{\
    UIResponder *firstResponder = [self findFirstResponderUnder:[self window]];\
    if (![firstResponder isKindOfClass:[UITextField class]])\
        return nil;\
    return (UITextField *)firstResponder;\
\}\
\
- (void)updateKeyboardButtonFor:(UITextField *)textField \{\
    \
//    // Remove any previous button\
//    [self.numberPadDoneButton removeFromSuperview];\
//    self.numberPadDoneButton = nil;\
    \
    // Does the text field use a number pad?\
    if (textField.keyboardType != UIKeyboardTypeNumberPad)\
        return;\
    \
    // If there's no keyboard yet, don't do anything\
    if ([[[UIApplication sharedApplication] windows] count] < 2)\
        return;\
    UIWindow *keyboardWindow = [[[UIApplication sharedApplication] windows] objectAtIndex:1];\
    \
    // Create new custom button\
    self.numberPadDoneButton = [UIButton buttonWithType:UIButtonTypeCustom];\
    self.numberPadDoneButton.frame = CGRectMake(0, 163, 106, 53);\
    self.numberPadDoneButton.adjustsImageWhenHighlighted = FALSE;\
    [self.numberPadDoneButton setTitle:@"Return" forState:UIControlStateNormal];\
    [self.numberPadDoneButton setFont:[UIFont boldSystemFontOfSize:18]];\
    [self.numberPadDoneButton setTitleColor:[UIColor colorWithRed:77.0f/255.0f green:84.0f/255.0f blue:98.0f/255.0f alpha:1.0] forState:UIControlStateNormal];\
    \
    [self.numberPadDoneButton setImage:self.numberPadDoneImageNormal forState:UIControlStateNormal];\
    [self.numberPadDoneButton setImage:self.numberPadDoneImageHighlighted forState:UIControlStateHighlighted];\
    [self.numberPadDoneButton addTarget:self action:@selector(numberPadDoneButton:) forControlEvents:UIControlEventTouchUpInside];\
    \
    // Locate keyboard view and add button\
    NSString *keyboardPrefix = [[[UIDevice currentDevice] systemVersion] floatValue] >= 3.2 ? @"<UIPeripheralHost" : @"<UIKeyboard";\
    for (UIView *subView in keyboardWindow.subviews) \{\
        if ([[subView description] hasPrefix:keyboardPrefix]) \{\
            [subView addSubview:self.numberPadDoneButton];\
            [self.numberPadDoneButton addTarget:self action:@selector(numberPadDoneButton:) forControlEvents:UIControlEventTouchUpInside];\
            break;\
        \}\
    \}\
\}\
\
- (void)textFieldDidBeginEditing:(NSNotification *)note \{\
    [self updateKeyboardButtonFor:[note object]];\
\}\
\
- (void)keyboardWillShow:(NSNotification *)note \{\
    [self updateKeyboardButtonFor:[self findFirstResponderTextField]];\
\}\
\
- (void)keyboardDidShow:(NSNotification *)note \{\
    [self updateKeyboardButtonFor:[self findFirstResponderTextField]];\
\}\
\
- (IBAction)numberPadDoneButton:(id)sender \{\
    UITextField *textField = [self findFirstResponderTextField];\
    [textField resignFirstResponder];\
\}\
*/\cf0 \
\
\
\cf2 /*\
- (void)viewDidLoad\
\{\
    [super viewDidLoad];\
    \
    UIToolbar* numberToolbar = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, 320, 50)];\
    numberToolbar.barStyle = UIBarStyleBlackTranslucent;\
    numberToolbar.items = [NSArray arrayWithObjects:\
                           [[UIBarButtonItem alloc]initWithTitle:@"Cancel" style:UIBarButtonItemStyleBordered target:self action:@selector(cancelNumberPad)],\
                           [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],\
                           [[UIBarButtonItem alloc]initWithTitle:@"Apply" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)],\
                           nil];\
    [numberToolbar sizeToFit];\
    numberTextField.inputAccessoryView = numberToolbar;\
\}\
\
-(void)cancelNumberPad\{\
    [numberTextField resignFirstResponder];\
    numberTextField.text = @"";\
\}\
\
-(void)doneWithNumberPad\{\
    NSString *numberFromTheKeyboard = numberTextField.text;\
    [numberTextField resignFirstResponder];\
\}\
*/\cf0 \
\
\cf2 //UITapGestureRecognizer *viewBackgroundTap = [[UITapGestureRecognizer alloc] initWithTarget:self: action:@selector(backgroundTap:)];\cf0 \
\cf2 //viewBackgroundTap.cancelTouchesInView = NO;\cf0 \
\cf2 //[self.view addGestureRecognizer:viewBackgroundTap];\cf0 \
\cf2 //[viewBackgroundTap release];\cf0 \
\
\cf2 //- (IBAction)backgroundTap:(id)sender\cf0 \
\cf2 //\{\cf0 \
\cf2 //    [iscVstart resignFirstResponder];	\cf0 \
\cf2 //    [iscVn resignFirstResponder];\cf0 \
\cf2 //    [iscVsl resignFirstResponder];\cf0 \
\cf2 //\}\cf0 \
}